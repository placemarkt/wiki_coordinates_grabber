.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SEM 1"
.TH SEM 1 "2020-01-27" "20200122" "parallel"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
sem \- semaphore for executing shell command lines in parallel
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBsem\fR [\-\-fg] [\-\-id <id>] [\-\-semaphoretimeout <secs>] [\-j <num>] [\-\-wait] command
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1GNU\s0 \fBsem\fR is an alias for \s-1GNU\s0 \fBparallel \-\-semaphore\fR.
.PP
\&\s-1GNU\s0 \fBsem\fR acts as a counting semaphore. When \s-1GNU\s0 \fBsem\fR is called
with command it starts the command in the background. When \fInum\fR
number of commands are running in the background, \s-1GNU\s0 \fBsem\fR waits for
one of these to complete before starting the command.
.PP
\&\s-1GNU\s0 \fBsem\fR does not read any arguments to build the command (no \-a,
:::, and ::::). It simply waits for a semaphore to become available
and then runs the command given.
.PP
Before looking at the options you may want to check out the examples
after the list of options. That will give you an idea of what \s-1GNU\s0
\&\fBsem\fR is capable of.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fIcommand\fR" 9
.IX Item "command"
Command to execute. The command may be followed by arguments for the
command.
.IP "\fB\-\-bg\fR" 9
.IX Item "--bg"
Run command in background thus \s-1GNU\s0 \fBsem\fR will not wait for
completion of the command before exiting. This is the default.
.Sp
In toilet analogy: \s-1GNU\s0 \fBsem\fR waits for a toilet to be available,
gives the toilet to a person, and exits immediately.
.Sp
See also: \fB\-\-fg\fR
.IP "\fB\-\-jobs\fR \fIN\fR" 9
.IX Item "--jobs N"
.PD 0
.IP "\fB\-j\fR \fIN\fR" 9
.IX Item "-j N"
.IP "\fB\-\-max\-procs\fR \fIN\fR" 9
.IX Item "--max-procs N"
.IP "\fB\-P\fR \fIN\fR" 9
.IX Item "-P N"
.PD
Run up to N commands in parallel. Default is 1 thus acting like a
mutex.
.Sp
In toilet analogy: \fB\-j\fR is the number of toilets.
.IP "\fB\-\-jobs\fR \fI+N\fR" 9
.IX Item "--jobs +N"
.PD 0
.IP "\fB\-j\fR \fI+N\fR" 9
.IX Item "-j +N"
.IP "\fB\-\-max\-procs\fR \fI+N\fR" 9
.IX Item "--max-procs +N"
.IP "\fB\-P\fR \fI+N\fR" 9
.IX Item "-P +N"
.PD
Add N to the number of \s-1CPU\s0 cores.  Run up to this many jobs in
parallel. For compute intensive jobs \fB\-j\fR +0 is useful as it will run
number-of-cpu-cores jobs simultaneously.
.IP "\fB\-\-jobs\fR \fI\-N\fR" 9
.IX Item "--jobs -N"
.PD 0
.IP "\fB\-j\fR \fI\-N\fR" 9
.IX Item "-j -N"
.IP "\fB\-\-max\-procs\fR \fI\-N\fR" 9
.IX Item "--max-procs -N"
.IP "\fB\-P\fR \fI\-N\fR" 9
.IX Item "-P -N"
.PD
Subtract N from the number of \s-1CPU\s0 cores.  Run up to this many jobs in
parallel.  If the evaluated number is less than 1 then 1 will be used.
See also \fB\-\-use\-cpus\-instead\-of\-cores\fR.
.IP "\fB\-\-jobs\fR \fIN\fR%" 9
.IX Item "--jobs N%"
.PD 0
.IP "\fB\-j\fR \fIN\fR%" 9
.IX Item "-j N%"
.IP "\fB\-\-max\-procs\fR \fIN\fR%" 9
.IX Item "--max-procs N%"
.IP "\fB\-P\fR \fIN\fR%" 9
.IX Item "-P N%"
.PD
Multiply N% with the number of \s-1CPU\s0 cores.  Run up to this many jobs in
parallel.  If the evaluated number is less than 1 then 1 will be used.
See also \fB\-\-use\-cpus\-instead\-of\-cores\fR.
.IP "\fB\-\-jobs\fR \fIprocfile\fR" 9
.IX Item "--jobs procfile"
.PD 0
.IP "\fB\-j\fR \fIprocfile\fR" 9
.IX Item "-j procfile"
.IP "\fB\-\-max\-procs\fR \fIprocfile\fR" 9
.IX Item "--max-procs procfile"
.IP "\fB\-P\fR \fIprocfile\fR" 9
.IX Item "-P procfile"
.PD
Read parameter from file. Use the content of \fIprocfile\fR as parameter
for \fI\-j\fR. E.g. \fIprocfile\fR could contain the string 100% or +2 or
10.
.IP "\fB\-\-semaphorename\fR \fIname\fR" 9
.IX Item "--semaphorename name"
.PD 0
.IP "\fB\-\-id\fR \fIname\fR" 9
.IX Item "--id name"
.PD
Use \fBname\fR as the name of the semaphore. Default is the name of the
controlling tty (output from \fBtty\fR).
.Sp
The default normally works as expected when used interactively, but
when used in a script \fIname\fR should be set. \fI$$\fR or \fImy_task_name\fR
are often a good value.
.Sp
The semaphore is stored in ~/.parallel/semaphores/
.Sp
In toilet analogy the name corresponds to different types of toilets:
e.g. male, female, customer, staff.
.IP "\fB\-\-fg\fR" 9
.IX Item "--fg"
Do not put command in background.
.Sp
In toilet analogy: \s-1GNU\s0 \fBsem\fR waits for a toilet to be available,
takes a person to the toilet, waits for the person to finish, and
exits.
.IP "\fB\-\-semaphoretimeout\fR \fIsecs\fR" 9
.IX Item "--semaphoretimeout secs"
.PD 0
.IP "\fB\-\-st\fR \fIsecs\fR" 9
.IX Item "--st secs"
.PD
If \fIsecs\fR > 0: If the semaphore is not released within \fIsecs\fR
seconds, take it anyway.
.Sp
If \fIsecs\fR < 0: If the semaphore is not released within \fIsecs\fR
seconds, exit.
.Sp
In toilet analogy: \fIsecs\fR > 0: If no toilet becomes available within
\&\fIsecs\fR seconds, pee on the floor. \fIsecs\fR < 0: If no toilet becomes
available within \fIsecs\fR seconds, exit without doing anything.
.IP "\fB\-\-wait\fR" 9
.IX Item "--wait"
Wait for all commands to complete.
.Sp
In toilet analogy: Wait until all toilets are empty, then exit.
.SH "UNDERSTANDING A SEMAPHORE"
.IX Header "UNDERSTANDING A SEMAPHORE"
Try the following example:
.PP
.Vb 5
\&  sem \-j 2 \*(Aqsleep 1;echo 1 finished\*(Aq;   echo sem 1 exited
\&  sem \-j 2 \*(Aqsleep 2;echo 2 finished\*(Aq;   echo sem 2 exited
\&  sem \-j 2 \*(Aqsleep 3;echo 3 finished\*(Aq;   echo sem 3 exited
\&  sem \-j 2 \*(Aqsleep 4;echo 4 finished\*(Aq;   echo sem 4 exited
\&  sem \-\-wait; echo sem \-\-wait done
.Ve
.PP
In toilet analogy this uses 2 toilets (\fB\-j 2\fR). \s-1GNU\s0 \fBsem\fR takes '1'
to a toilet, and exits immediately. While '1' is sleeping, another \s-1GNU\s0
\&\fBsem\fR takes '2' to a toilet, and exits immediately.
.PP
While '1' and '2' are sleeping, another \s-1GNU\s0 \fBsem\fR waits for a free
toilet. When '1' finishes, a toilet becomes available, and this \s-1GNU\s0
\&\fBsem\fR stops waiting, and takes '3' to a toilet, and exits
immediately.
.PP
While '2' and '3' are sleeping, another \s-1GNU\s0 \fBsem\fR waits for a free
toilet.  When '2' finishes, a toilet becomes available, and this \s-1GNU\s0
\&\fBsem\fR stops waiting, and takes '4' to a toilet, and exits
immediately.
.PP
Finally another \s-1GNU\s0 \fBsem\fR waits for all toilets to become free.
.SH "EXAMPLE: Gzipping *.log"
.IX Header "EXAMPLE: Gzipping *.log"
Run one gzip process per \s-1CPU\s0 core. Block until a \s-1CPU\s0 core becomes
available.
.PP
.Vb 5
\&  for i in *.log ; do
\&    echo $i
\&    sem \-j+0 gzip $i ";" echo done
\&  done
\&  sem \-\-wait
.Ve
.SH "EXAMPLE: Protecting pod2html from itself"
.IX Header "EXAMPLE: Protecting pod2html from itself"
pod2html creates two files: pod2htmd.tmp and pod2htmi.tmp which it
does not clean up. It uses these two files for a short time. But if
you run multiple pod2html in parallel (e.g. in a Makefile with make
\&\-j) there is a risk that two different instances of pod2html will
write to the files at the same time:
.PP
.Vb 3
\&  # This may fail due to shared pod2htmd.tmp/pod2htmi.tmp files
\&  foo.html:
\&          pod2html foo.pod \-\-outfile foo.html
\&
\&  bar.html:
\&          pod2html bar.pod \-\-outfile bar.html
\&
\&  $ make \-j foo.html bar.html
.Ve
.PP
You need to protect pod2html from running twice at the same time.
\&\fBsem\fR running as a mutex will make sure only one runs:
.PP
.Vb 2
\&  foo.html:
\&          sem \-\-id pod2html pod2html foo.pod \-\-outfile foo.html
\&
\&  bar.html:
\&          sem \-\-id pod2html pod2html bar.pod \-\-outfile bar.html
\&
\&  clean: foo.html bar.html
\&          sem \-\-id pod2html \-\-wait
\&          rm \-f pod2htmd.tmp pod2htmi.tmp
\&
\&  $ make \-j foo.html bar.html clean
.Ve
.SH "BUGS"
.IX Header "BUGS"
None known.
.SH "REPORTING BUGS"
.IX Header "REPORTING BUGS"
Report bugs to <bug\-parallel@gnu.org>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (C) 2010\-2020 Ole Tange, http://ole.tange.dk and Free
Software Foundation, Inc.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation; either version 3 of the License, or
at your option any later version.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
.SS "Documentation license I"
.IX Subsection "Documentation license I"
Permission is granted to copy, distribute and/or modify this documentation
under the terms of the \s-1GNU\s0 Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the file fdl.txt.
.SS "Documentation license \s-1II\s0"
.IX Subsection "Documentation license II"
You are free:
.IP "\fBto Share\fR" 9
.IX Item "to Share"
to copy, distribute and transmit the work
.IP "\fBto Remix\fR" 9
.IX Item "to Remix"
to adapt the work
.PP
Under the following conditions:
.IP "\fBAttribution\fR" 9
.IX Item "Attribution"
You must attribute the work in the manner specified by the author or
licensor (but not in any way that suggests that they endorse you or
your use of the work).
.IP "\fBShare Alike\fR" 9
.IX Item "Share Alike"
If you alter, transform, or build upon this work, you may distribute
the resulting work only under the same, similar or a compatible
license.
.PP
With the understanding that:
.IP "\fBWaiver\fR" 9
.IX Item "Waiver"
Any of the above conditions can be waived if you get permission from
the copyright holder.
.IP "\fBPublic Domain\fR" 9
.IX Item "Public Domain"
Where the work or any of its elements is in the public domain under
applicable law, that status is in no way affected by the license.
.IP "\fBOther Rights\fR" 9
.IX Item "Other Rights"
In no way are any of the following rights affected by the license:
.RS 9
.IP "\(bu" 2
Your fair dealing or fair use rights, or other applicable
copyright exceptions and limitations;
.IP "\(bu" 2
The author's moral rights;
.IP "\(bu" 2
Rights other persons may have either in the work itself or in
how the work is used, such as publicity or privacy rights.
.RE
.RS 9
.RE
.IP "\fBNotice\fR" 9
.IX Item "Notice"
For any reuse or distribution, you must make clear to others the
license terms of this work.
.PP
A copy of the full license is included in the file as cc\-by\-sa.txt.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
\&\s-1GNU\s0 \fBsem\fR uses Perl, and the Perl modules Getopt::Long,
Symbol, Fcntl.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBparallel\fR(1)
