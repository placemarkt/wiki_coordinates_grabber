.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PARSET 1"
.TH PARSET 1 "2020-01-27" "20200122" "parallel"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
parset \- set shell variables in parallel
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBparset\fR \fIvariablename\fR [options for \s-1GNU\s0 Parallel]
.PP
\&\fBenv_parset\fR \fIvariablename\fR [options for \s-1GNU\s0 Parallel]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBparset\fR is a shell function that puts the output from \s-1GNU\s0
\&\fBparallel\fR into shell variables.
.PP
\&\fBenv_parset\fR is a shell function that puts the output from
\&\fBenv_parallel\fR into shell variables.
.PP
The \fBparset\fR and \fBenv_parset\fR functions are defined as part of
\&\fBenv_parallel\fR.
.PP
If \fIvariablename\fR is a single variable name, this will be treated as
the destination variable and made into an array.
.PP
If \fIvariablename\fR contains multiple names separated by ',' or space,
the names will be the destination variables. The number of names must
be at least the number of jobs \- otherwise some tmp files will not be
cleaned up.
.SH "OPTIONS"
.IX Header "OPTIONS"
Same as \s-1GNU\s0 \fBparallel\fR, but they are put \fIafter\fR the destination
variable.
.SH "SUPPORTED SHELLS"
.IX Header "SUPPORTED SHELLS"
.SS "Bash/Zsh/Ksh/Mksh"
.IX Subsection "Bash/Zsh/Ksh/Mksh"
\fIExamples\fR
.IX Subsection "Examples"
.PP
Put output into \fBmyarray\fR:
.PP
.Vb 2
\&  parset myarray seq 3 ::: 4 5 6
\&  echo "${myarray[1]}"
.Ve
.PP
Put output into vars \fB\f(CB$seq\fB, \f(CB$pwd\fB, \f(CB$ls\fB\fR:
.PP
.Vb 2
\&  parset "seq pwd ls" ::: "seq 10" pwd ls
\&  echo "$ls"
.Ve
.PP
Put output into vars \fB\f(CB$seq\fB, \f(CB$pwd\fB, \f(CB$ls\fB\fR:
.PP
.Vb 3
\&  into_vars=(seq pwd ls)
\&  parset "${into_vars[*]}" ::: "seq 10" pwd ls
\&  echo "$ls"
.Ve
.PP
The commands to run can be an array:
.PP
.Vb 4
\&  cmd=("echo first" "echo \*(Aq<<joe  \e"double  space\e"  cartoon>>\*(Aq" "pwd")
\&  parset data ::: "${cmd[@]}"
\&  echo "${data[1]}"
\&  echo "${data[2]}"
.Ve
.PP
\&\fBparset\fR can read from stdin (standard input) if it is a file:
.PP
.Vb 1
\&  parset res echo < parallel_input_file
.Ve
.PP
but \fBparset\fR can not be part of a pipe. In particular this means it
cannot read from a pipe or write to a pipe:
.PP
.Vb 1
\&  seq 10 | parset res echo Does not work
.Ve
.PP
but must instead use a tempfile:
.PP
.Vb 4
\&  seq 10 > parallel_input
\&  parset res echo :::: parallel_input
\&  echo "${res[1]}"
\&  echo "${res[9]}"
.Ve
.PP
or a \s-1FIFO:\s0
.PP
.Vb 5
\&  mkfifo input_fifo
\&  seq 30 > input_fifo &
\&  parset res echo :::: input_fifo
\&  echo "${res[1]}"
\&  echo "${res[29]}"
.Ve
.PP
or Bash/Zsh/Ksh process substitution:
.PP
.Vb 3
\&  parset res echo :::: <(seq 100)
\&  echo "${res[1]}"
\&  echo "${res[99]}"
.Ve
.PP
\fIInstallation\fR
.IX Subsection "Installation"
.PP
Put this in the relevant \fB\f(CB$HOME\fB/.bashrc\fR or \fB\f(CB$HOME\fB/.zshenv\fR or \fB\f(CB$HOME\fB/.kshrc\fR:
.PP
.Vb 3
\&  . \`which env_parallel.bash\`
\&  . \`which env_parallel.zsh\`
\&  source \`which env_parallel.ksh\`
.Ve
.PP
E.g. by doing:
.PP
.Vb 3
\&  echo \*(Aq. \`which env_parallel.bash\`\*(Aq >> $HOME/.bashrc
\&  echo \*(Aq. \`which env_parallel.zsh\`\*(Aq >> $HOME/.zshenv
\&  echo \*(Aqsource \`which env_parallel.ksh\`\*(Aq >> $HOME/.kshrc
.Ve
.PP
or by doing:
.PP
.Vb 1
\&  env_parallel \-\-install
.Ve
.SS "ash/dash (FreeBSD's /bin/sh)"
.IX Subsection "ash/dash (FreeBSD's /bin/sh)"
\fIExamples\fR
.IX Subsection "Examples"
.PP
ash does not support arrays.
.PP
Put output into vars \fB\f(CB$seq\fB, \f(CB$pwd\fB, \f(CB$ls\fB\fR:
.PP
.Vb 2
\&  parset "seq pwd ls" ::: "seq 10" pwd ls
\&  echo "$ls"
.Ve
.PP
\&\fBparset\fR can read from stdin (standard input) if it is a file:
.PP
.Vb 1
\&  parset res1,res2,res3 echo < parallel_input_file
.Ve
.PP
but \fBparset\fR can not be part of a pipe. In particular this means it
cannot read from a pipe or write to a pipe:
.PP
.Vb 1
\&  seq 3 | parset res1,res2,res3 echo Does not work
.Ve
.PP
but must instead use a tempfile:
.PP
.Vb 5
\&  seq 3 > parallel_input
\&  parset res1,res2,res3 echo :::: parallel_input
\&  echo "$res1"
\&  echo "$res2"
\&  echo "$res3"
.Ve
.PP
or a \s-1FIFO:\s0
.PP
.Vb 6
\&  mkfifo input_fifo
\&  seq 3 > input_fifo &
\&  parset res1,res2,res3 echo :::: input_fifo
\&  echo "$res1"
\&  echo "$res2"
\&  echo "$res3"
.Ve
.PP
\fIInstallation\fR
.IX Subsection "Installation"
.PP
Put the relevant one of these into \fB\f(CB$HOME\fB/.profile\fR:
.PP
.Vb 3
\&  . \`which env_parallel.sh\`
\&  . \`which env_parallel.ash\`
\&  . \`which env_parallel.dash\`
.Ve
.PP
E.g. by doing:
.PP
.Vb 1
\&  echo \*(Aq. \`which env_parallel.ash\`\*(Aq >> $HOME/.bashrc
.Ve
.PP
or by doing:
.PP
.Vb 1
\&  env_parallel \-\-install
.Ve
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
Same as \s-1GNU\s0 \fBparallel\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
When using \s-1GNU\s0 \fBparallel\fR for a publication please cite:
.PP
O. Tange (2011): \s-1GNU\s0 Parallel \- The Command-Line Power Tool, ;login:
The \s-1USENIX\s0 Magazine, February 2011:42\-47.
.PP
This helps funding further development; and it won't cost you a cent.
If you pay 10000 \s-1EUR\s0 you should feel free to use \s-1GNU\s0 Parallel without citing.
.PP
Copyright (C) 2007\-10\-18 Ole Tange, http://ole.tange.dk
.PP
Copyright (C) 2008\-2010 Ole Tange, http://ole.tange.dk
.PP
Copyright (C) 2010\-2020 Ole Tange, http://ole.tange.dk and Free
Software Foundation, Inc.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation; either version 3 of the License, or
at your option any later version.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
.SS "Documentation license I"
.IX Subsection "Documentation license I"
Permission is granted to copy, distribute and/or modify this documentation
under the terms of the \s-1GNU\s0 Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the file fdl.txt.
.SS "Documentation license \s-1II\s0"
.IX Subsection "Documentation license II"
You are free:
.IP "\fBto Share\fR" 9
.IX Item "to Share"
to copy, distribute and transmit the work
.IP "\fBto Remix\fR" 9
.IX Item "to Remix"
to adapt the work
.PP
Under the following conditions:
.IP "\fBAttribution\fR" 9
.IX Item "Attribution"
You must attribute the work in the manner specified by the author or
licensor (but not in any way that suggests that they endorse you or
your use of the work).
.IP "\fBShare Alike\fR" 9
.IX Item "Share Alike"
If you alter, transform, or build upon this work, you may distribute
the resulting work only under the same, similar or a compatible
license.
.PP
With the understanding that:
.IP "\fBWaiver\fR" 9
.IX Item "Waiver"
Any of the above conditions can be waived if you get permission from
the copyright holder.
.IP "\fBPublic Domain\fR" 9
.IX Item "Public Domain"
Where the work or any of its elements is in the public domain under
applicable law, that status is in no way affected by the license.
.IP "\fBOther Rights\fR" 9
.IX Item "Other Rights"
In no way are any of the following rights affected by the license:
.RS 9
.IP "\(bu" 2
Your fair dealing or fair use rights, or other applicable
copyright exceptions and limitations;
.IP "\(bu" 2
The author's moral rights;
.IP "\(bu" 2
Rights other persons may have either in the work itself or in
how the work is used, such as publicity or privacy rights.
.RE
.RS 9
.RE
.IP "\fBNotice\fR" 9
.IX Item "Notice"
For any reuse or distribution, you must make clear to others the
license terms of this work.
.PP
A copy of the full license is included in the file as cc\-by\-sa.txt.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
\&\fBparset\fR uses \s-1GNU\s0 \fBparallel\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBparallel\fR(1), \fBenv_parallel\fR(1), \fBbash\fR(1).
